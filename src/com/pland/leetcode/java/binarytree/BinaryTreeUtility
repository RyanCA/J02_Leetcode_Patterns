package com.pland.leetcode.java.binarytree;

import java.util.ArrayList;
import java.util.Arrays;

public class BinaryTreeUtility{
	
	public static void main(String args[]){
		
		test();
		
		
		
	}
	
	public static void test(){
		Integer[] array = new Integer[21];
		array[0]=3;
		array[1]=5;
		array[2]=9;
		array[3]=6;
		array[4]=8;
		array[5]=20;
		array[6]=10;
		array[7]=null;
		array[8]=null;
		array[9]=9;
		array[10]=null;
		array[11]=null;
		array[12]=null;
		array[13]=null;
		array[14]=null;
		array[15]=null;
		array[16]=null;
		array[17]=null;
		array[18]=null;
		array[19]=null;
		array[20]=null;
		
		
//		TreeNode root = buildBinaryTreeFromArray(array);
//		binaryTreeTravesalPreOrder(root);
//		binaryTreeTravesalInOrder(root);
//		binaryTreeTravesalPostOrder(root);
//		binaryTreeTravesalByLevel(root);
		
		Integer[] preorderArray = {new Integer(3), new Integer(9), new Integer(20), new Integer(15), new Integer(7)};
		Integer[] inorderArray = {new Integer(9), new Integer(3), new Integer(15), new Integer(20), new Integer(7)};
		TreeNode root2 = buildTreeByPreAndInOrderArray(preorderArray, inorderArray);
		binaryTreeTravesalPreOrder(root2);
		binaryTreeTravesalInOrder(root2);
		binaryTreeTravesalPostOrder(root2);
	}
	
	
	
	/**
	 * https://www.geeksforgeeks.org/binary-tree-array-implementation/
	 * 
	 * Binary tree can be represented by array, here is an example:
	 * 
	 *               3
	 *             /  \
	 *            5    9
	 *           / \  / \ 
	 *          6   8 20 10 
	 *             /
	 *            9
	 *            
	 * Array representation:
	 * 
	 * Array: 3 | 5 | 9 | 6 | 8 | 20 | 10 | null | null | 9 | null | null | null | null | null | null | null | null | null | null | null
	 * Index: 0   1   2   3   4    5    6    7       8    9    10     11     12     13     14     15     16     17     18     19     20
	 * 
	 */
	public static TreeNode buildBinaryTreeFromArray(Integer[] array){
		
		if(array == null){
			throw new NullPointerException("Input array is null");
		}
		
		if(array[0] == null){
			throw new NullPointerException("array[0] is null");
		}
		
		TreeNode root = new TreeNode(array[0]);
		linkNode(root, array, 0);
		return root;
		
		
	}
	
	private static void linkNode(TreeNode node, Integer[] array, int index){
		
		if((2*index+1)+1 <= array.length){
			if(array[2*index+1] == null){
				node.leftNode = null;
			}
			else{
				node.leftNode = new TreeNode(array[2*index+1]);
				linkNode(node.leftNode, array, 2*index+1);
			}
	
		}
		
		if((2*index+2)+1 <= array.length){
			if(array[2*index+2] == null){
				node.rightNode = null;
			}
			else{
				node.rightNode = new TreeNode(array[2*index+2]);
				linkNode(node.rightNode, array, 2*index+2);
			}
			
		}
		
	}
	
	/**
	 * Expected result: 3 5 6 8 9 9 20 10 
	 * 
	 */
	public static void binaryTreeTravesalPreOrder(TreeNode root){
		doPreOrder(root);
		System.out.println();
	}
	
	private static void doPreOrder(TreeNode node){
		if(node != null){
			System.out.print(node.value+" ");
			if(node.leftNode != null){
				doPreOrder(node.leftNode);
			}
			if(node.rightNode != null){
				doPreOrder(node.rightNode);
			}
		}
	}
	
	/**
	 * Expected result: 6 5 9 8 3 20 9 10
	 * 
	 */
	public static void binaryTreeTravesalInOrder(TreeNode root){
		doInOrder(root);
		System.out.println();
	}
	
	private static void doInOrder(TreeNode node){
		if(node != null){
			if(node.leftNode != null){
				doInOrder(node.leftNode);
			}
			System.out.print(node.value+" ");
			if(node.rightNode != null){
				doInOrder(node.rightNode);
			}
		}
	}
	
	/**
	 * Expected result: 6 9 8 5 20 10 9 3 
	 * 
	 */
	public static void binaryTreeTravesalPostOrder(TreeNode root){
		doPostOrder(root);
		System.out.println();
	}
	
	private static void doPostOrder(TreeNode node){
		if(node != null){
			if(node.leftNode != null){
				doPostOrder(node.leftNode);
			}
			
			if(node.rightNode != null){
				doPostOrder(node.rightNode);
			}
			
			System.out.print(node.value+" ");
		}
	}
	
	public static void binaryTreeTravesalByLevel(TreeNode root){
		
		ArrayList<ArrayList<Integer>> list = new ArrayList<ArrayList<Integer>>();
		doLevelOrder(root, list, 0);
		System.out.println(list);
	}
	
	
	private static void doLevelOrder(TreeNode node, ArrayList<ArrayList<Integer>> list, int depth){
		
		if(node != null){
			if(list.size()-1 < depth){
				ArrayList<Integer> subList = new ArrayList<Integer>();
				list.add(depth, subList);
			}
			ArrayList<Integer> subList = list.get(depth);
			subList.add(node.value);
		}
		
		if(node.leftNode != null){
			doLevelOrder(node.leftNode, list, depth+1);
		}
		
		if(node.rightNode != null){
			doLevelOrder(node.rightNode, list, depth+1);
		}
	}
	
	/**
	 * 
	 * https://www.geeksforgeeks.org/construct-tree-from-given-inorder-and-preorder-traversal/
	 * 
	 * 1. Preorder determine next node;
	 * 2. Inorder determine left tree and right tree;
	 * @throws Exception 
	 */
	public static TreeNode buildTreeByPreAndInOrderArray(Integer[] preOrder, Integer[] inOrder){
		
		if(preOrder == null || inOrder == null || preOrder.length != inOrder.length){
			throw new IllegalArgumentException("Arguments are not legal input");
		}
		
		TreeNode root = doPreAndInOrderToBuildTree(null, 0, preOrder, inOrder);
		return root;
		
	}
	
	private static TreeNode doPreAndInOrderToBuildTree(TreeNode node, int preOrderIndex, Integer[] preOrder, Integer[] inOrder){
		
        if(preOrderIndex == 0){
        	node  = new TreeNode(preOrder[preOrderIndex]);
        }
			
		Integer[] leftTreeNodes = leftTreeNodes(inOrder, preOrder[preOrderIndex]);
		
		if(leftTreeNodes == null){
		    node.leftNode = null;
		}
		else{
			boolean breakFlag = false;
			int preOrderIndexForNextCall = 0;
			
			for(int i=preOrderIndex+1; i<preOrder.length; i++){

				for(int j=0; j<leftTreeNodes.length; j++){
					if(preOrder[i].equals(leftTreeNodes[j])){
						node.leftNode = new TreeNode(leftTreeNodes[j]);
						breakFlag = true;
						if(breakFlag == true){
							preOrderIndexForNextCall = i;
							break;
						}
					}
				}
				
				if(breakFlag == true){
					break;
				}
			}
			doPreAndInOrderToBuildTree(node.leftNode, preOrderIndexForNextCall, preOrder, leftTreeNodes);
			
		}
		
			
		Integer[] rightTreeNodes = rightTreeNodes(inOrder, preOrder[preOrderIndex]);
		if(rightTreeNodes == null){
			node.rightNode = null;
		}
		else{
			boolean breakFlag = false;
			int preOrderIndexIIForNextCall = 0;
			for(int i=preOrderIndex+1; i<preOrder.length; i++){
				for(int j=0; j<rightTreeNodes.length; j++){
					if(preOrder[i].equals(rightTreeNodes[j])){
						node.rightNode = new TreeNode(rightTreeNodes[j]);
						breakFlag = true;
						if(breakFlag == true){
							preOrderIndexIIForNextCall = i;
							break;
						}
					}
				}
				if(breakFlag == true){
					break;
				}
			}
			doPreAndInOrderToBuildTree(node.rightNode, preOrderIndexIIForNextCall, preOrder, rightTreeNodes);
		}

		return node;
		
	}
	
	private static Integer[] leftTreeNodes(Integer[] inOrder, Integer midNodeValue){
		int index = 0;
		for(Integer temp : inOrder){
			if(temp.equals(midNodeValue)){
				break; 
			}
			index++;
		}
		//Scenario: there is no left tree
		if(index-1<0){
			return null;
		}
		Integer[] leftTreeArray = Arrays.copyOfRange(inOrder, 0, index-1);
		return leftTreeArray;
	}
	
	private static Integer[] rightTreeNodes(Integer[] inOrder, Integer midNodeValue){
		int index = 0;
		for(Integer temp : inOrder){
			if(temp.equals(midNodeValue)){
				break; 
			}
			index++;
		}
		
		if(index < (inOrder.length-1)){
			//System.out.println("index+1="+index+1+" inOrder.length-1="+(inOrder.length-1));
			Integer[] leftTreeArray = Arrays.copyOfRange(inOrder, index+1, inOrder.length-1);
			return leftTreeArray;
		}
		//Scenario: there is no right tree
		else{
			return null;
		}
		
	}
	

}

class TreeNode{
	
	public Integer value;
	public TreeNode leftNode;
	public TreeNode rightNode;
	
	public TreeNode(Integer value, TreeNode left, TreeNode right){
		if(value == null){
			throw new NullPointerException("TreeNode value can't be null");
		}
		this.value = value;
		this.leftNode = left;
		this.rightNode = right;
	}
	
	public TreeNode(Integer value){
		if(value == null){
			throw new NullPointerException("TreeNode value can't be null");
		}
		this.value = value;
	}
	
}
